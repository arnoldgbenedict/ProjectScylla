/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scylla;

import java.awt.CardLayout;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author arnold.g.benedict
 */
public class mainAct extends javax.swing.JFrame {

    /**
     * Creates new form mainAct
     */
    public mainAct() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmEncode = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        addEncodeImage = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        encodeImageText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        encodePayloadText = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        encodeButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        decodeImageText = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        confirmEncode.setBounds(new java.awt.Rectangle(0, 0, 700, 400));

        jLabel3.setText("Output Scylla Files");

        jLabel4.setText("Payload Files");

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setBounds(new java.awt.Rectangle(0, 0, 100, 100));

        jPanel3.setBounds(new java.awt.Rectangle(0, 0, 100, 100));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel3);

        jButton2.setText("Generate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Generating...");

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("jLabel11");

        jLabel13.setForeground(new java.awt.Color(255, 0, 51));

        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("jLabel14");

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane5.setViewportView(jTextArea1);

        javax.swing.GroupLayout confirmEncodeLayout = new javax.swing.GroupLayout(confirmEncode.getContentPane());
        confirmEncode.getContentPane().setLayout(confirmEncodeLayout);
        confirmEncodeLayout.setHorizontalGroup(
            confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmEncodeLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
            .addGroup(confirmEncodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, confirmEncodeLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        confirmEncodeLayout.setVerticalGroup(
            confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmEncodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(confirmEncodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(jLabel13))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jLabel1.setText("Include Images to mask");

        addEncodeImage.setText("+ image");
        addEncodeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncodeImageActionPerformed(evt);
            }
        });

        encodeImageText.setEditable(false);
        encodeImageText.setColumns(20);
        encodeImageText.setRows(5);
        encodeImageText.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(encodeImageText);

        jLabel2.setText("Payload files");

        encodePayloadText.setEditable(false);
        encodePayloadText.setColumns(20);
        encodePayloadText.setRows(5);
        jScrollPane1.setViewportView(encodePayloadText);

        jButton1.setText("+ files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        encodeButton.setText("Generate Scylla");
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addEncodeImage))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(encodeButton)
                    .addComponent(jLabel12))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addEncodeImage)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encodeButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Encode", jPanel1);

        decodeImageText.setColumns(20);
        decodeImageText.setRows(5);
        jScrollPane4.setViewportView(decodeImageText);

        jLabel7.setText("Scylla files :");

        jLabel8.setText("Directory:");

        jButton6.setText("Browse");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("+ file");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("clear");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Extract");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel9.setText("/scylla/");

        jLabel10.setText("Extracting...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addContainerGap(55, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton9)
                        .addComponent(jLabel10))
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Decode", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ArrayList<String> inp = new ArrayList<String>();
    ArrayList<String> payload = new ArrayList<String>();
    ArrayList<String> out = new ArrayList<String>();
    String basePath = "/Users/arnold.g.benedict/Documents/workspace/stegna";
    int encodeSize = 0, payloadSize = 0;
    private void addEncodeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncodeImageActionPerformed
        
        jLabel12.setText("");
        JFileChooser imgChooser = new JFileChooser(basePath);
        imgChooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Files", "jpg");
        imgChooser.setFileFilter(filter);
        imgChooser.showOpenDialog(null);
        File fp = imgChooser.getCurrentDirectory();
        File[] files = imgChooser.getSelectedFiles();
        basePath = fp.getAbsolutePath();
        for(int i = 0;i<files.length;++i){
            encodeImageText.setText(encodeImageText.getText() + (encodeSize + 1) + ". " + files[i] + "\n");
            encodeSize++;
            inp.add(files[i].getAbsolutePath());
            out.add(Integer.toString(encodeSize));
        }
    }//GEN-LAST:event_addEncodeImageActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser(basePath);
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(null);
        File fp = chooser.getCurrentDirectory();
        File[] files = chooser.getSelectedFiles();
        basePath = fp.getAbsolutePath();
        for(int i = 0;i<files.length;++i){
            encodePayloadText.setText(encodePayloadText.getText() + (payloadSize + 1) + ". " + files[i] + "\n");
            payloadSize++;
            payload.add(files[i].getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeButtonActionPerformed
        float total_image_size = 0, total_payload_size = 0;
        for(String s : inp){
            try {
                BufferedImage b = ImageIO.read(new File(s));
                total_image_size += (b.getHeight() * b.getWidth() * 6);
            } catch (IOException ex) { 
                Logger.getLogger(mainAct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        FileOutputStream fout;
        try {
            fout = new FileOutputStream(basePath + "/payload.zip");
            ZipOutputStream zout=new ZipOutputStream(new BufferedOutputStream(fout));
            File[]s=new File[payload.size()];
            byte []b;
            for(String c : payload){
                s[payload.indexOf(c)] = new File(c);
            }
            for(int i=0;i<s.length;i++)
            {
                b=new byte[1024];
                FileInputStream fin=new FileInputStream(s[i]);
                zout.putNextEntry(new ZipEntry(s[i].getName()));
                int length;
                while((length=fin.read(b, 0, 1024))>0)
                {
                    zout.write(b,0,length);
                }
                zout.closeEntry();
                fin.close();
            }
            zout.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainAct.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainAct.class.getName()).log(Level.SEVERE, null, ex);
        }
        File file = new File(basePath + "/payload.zip");
         
        total_payload_size = (float) file.length();
        if(file.delete())
        {
            String s1 = "bits", s2 = "bytes";
            if(total_image_size/8 >=1){
                total_image_size /= 8; s1="bytes";
                if(total_image_size/1024>=1){
                    total_image_size /= 1024; s1="KB";
                    if(total_image_size/1024>=1){
                        total_image_size /= 1024; s1="MB";
                        if(total_image_size/1024>=1){
                            total_image_size /= 1024; s1="GB";
                        }
                    }
                }
            }
            if(total_payload_size/1024>=1){
                total_payload_size /= 1024; s2="KB";
                if(total_payload_size/1024>=1){
                    total_payload_size /= 1024; s2="MB";
                    if(total_payload_size/1024>=1){
                        total_payload_size /= 1024; s2="GB";
                    }
                }
            }
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(1);
            s1 = df.format(total_image_size) + s1;
            s2 = df.format(total_payload_size) + s2;
            jLabel14.setText("Camouflage capacity : " + s1 + " Total Payload Used : " + s2);
        }
        jLabel13.setText("");
        jPanel3.removeAll();
        jButton2.setEnabled(true);
        if(encodeSize != 0){
            jPanel3.setLayout(new FlowLayout(FlowLayout.LEFT));  
            for(String s:inp){
                JPanel temp = new JPanel();
                temp.setLayout(new BoxLayout (temp, BoxLayout.Y_AXIS));
                temp.add(new JLabel(new ImageIcon(new ImageIcon(s).getImage().getScaledInstance(80, 80, Image.SCALE_DEFAULT))));
                temp.add(new JTextField(out.get(inp.indexOf(s))));
                jPanel3.add(temp);
            }
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            int height = screenSize.height;
            int width = screenSize.width;
            confirmEncode.setSize(width/2, height/2);

            // center the jframe on screen
            confirmEncode.setLocationRelativeTo(null);
            confirmEncode.setVisible(true);
            jTextArea1.setText(encodePayloadText.getText());
            jLabel6.setVisible(false);
            jProgressBar1.setVisible(false);
            jButton2.requestFocus();
        }
        else jLabel12.setText("Please select scylla image(min. one)");
        if(payloadSize == 0) jLabel11.setText("Payload Empty");
        else jLabel11.setText("");
    }//GEN-LAST:event_encodeButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        SwingWorker sw1 = new SwingWorker() 
        {
            @Override
            protected String doInBackground() throws Exception 
            {
                // define what thread will do here
                jLabel6.setVisible(true);
                jProgressBar1.setVisible(true);
                jButton3.setEnabled(false);
                jProgressBar1.setStringPainted(true);
                jProgressBar1.setValue(0);
                BufferedImage[] carImg = new BufferedImage[inp.size()];
                for(int i = 0; i<inp.size();++i){
                    try {
                        carImg[i] = ImageIO.read(new File(inp.get(i)));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }        
                FileOutputStream fout;
                try {
                    fout = new FileOutputStream(basePath + "/payload.zip");
                    ZipOutputStream zout=new ZipOutputStream(new BufferedOutputStream(fout));
                    File[]s=new File[payload.size()];
                    byte []b;
                    for(String c : payload){
                        s[payload.indexOf(c)] = new File(c);
                    }
                    for(int i=0;i<s.length;i++)
                    {
                        b=new byte[1024];
                        FileInputStream fin=new FileInputStream(s[i]);
                        zout.putNextEntry(new ZipEntry(s[i].getName()));
                        int length;
                        while((length=fin.read(b, 0, 1024))>0)
                        {
                            zout.write(b,0,length);
                        }
                        zout.closeEntry();
                        fin.close();
                    }
                    zout.close();
                    jProgressBar1.setValue(10);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(mainAct.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(mainAct.class.getName()).log(Level.SEVERE, null, ex);
                }


                try {
                    BufferedImage[] encImg = encode(carImg, new BitInputStream(new File(basePath + "/payload.zip")), inp.size(), jLabel13);
                    for(int i = 0; i<inp.size();++i){
                        jProgressBar1.setValue((int)(((float)(i+1)/(float)inp.size())*90.0)+9);
                        ImageIO.write(encImg[i], "PNG", new File(basePath + "/" + out.get(i) + ".png"));
                    }
                    Desktop.getDesktop().open(new File(basePath + "/"));
                    
                } catch (Exception e) {
                    e.printStackTrace();
                    System.err.println(e.getMessage());
                }
                File file = new File(basePath + "/payload.zip");
         
                if(file.delete())
                {
                    jProgressBar1.setValue(100);
                    jLabel6.setText("Completed");
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(true);
                }
                return "done";
            }
 
            @Override
            protected void process(List chunks)
            {
                // define what the event dispatch thread 
                // will do with the intermediate results received
                // while the thread is executing
                
            }
 
            @Override
            protected void done() 
            {
                // this method is called when the background 
                // thread finishes execution
                
            }
        };
         
        // executes the swingworker on worker thread
        sw1.execute();
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        confirmEncode.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        inp = new ArrayList<String>();
        encodeImageText.setText("");
        encodeSize = 0;
    }//GEN-LAST:event_jButton4ActionPerformed
    int decodeSize = 0;
    ArrayList<String> dec = new ArrayList<String>();
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JFileChooser imgChooser = new JFileChooser(basePath);
        imgChooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG Scylla Files", "png");
        imgChooser.setFileFilter(filter);
        imgChooser.showOpenDialog(null);
        File fp = imgChooser.getCurrentDirectory();
        File[] files = imgChooser.getSelectedFiles();
        basePath = fp.getAbsolutePath();
        for(int i = 0;i<files.length;++i){
            decodeImageText.setText(decodeImageText.getText() + (decodeSize + 1) + ". " + files[i] + "\n");
            decodeSize++;
            dec.add(files[i].getAbsolutePath());
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        jTextField1.setText(basePath);
        jProgressBar2.setVisible(false);
        jLabel10.setVisible(false);
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser imgChooser = new JFileChooser(basePath);
        imgChooser.showOpenDialog(null);
        File fp = imgChooser.getCurrentDirectory();
        basePath = fp.getAbsolutePath();
        jTextField1.setText(basePath);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        SwingWorker sw1; 
        sw1 = new SwingWorker() 
        {
            @Override
            protected String doInBackground() throws Exception 
            {
                jProgressBar2.setVisible(true);
                jLabel10.setVisible(true);
                jProgressBar2.setValue(0);
                jProgressBar2.setStringPainted(true);
                try {
                    BufferedImage[] decImg = new BufferedImage[dec.size()];
                    for(int i = 0; i<dec.size();++i){
                        jProgressBar2.setValue((int)(((float)(i+1)/(float)dec.size())*15.0));
                        decImg[i] = ImageIO.read(new File(dec.get(i)));
                    }
                    decode(decImg, new BitOutputStream(new FileOutputStream(basePath + "/decoded.zip")), dec.size(), jProgressBar2);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                File dir = new File(basePath + "/scylla");
                if(!dir.exists()) dir.mkdirs();
                FileInputStream fis;
                long zipFileSize = 0;
                byte[] buffer = new byte[1024];
                try {
                    jProgressBar2.setValue(98);
                    try {
                        ZipFile zf = new ZipFile(basePath + "/decoded.zip");
                        Enumeration e = zf.entries();
                        while (e.hasMoreElements()) {
                          ZipEntry ze = (ZipEntry) e.nextElement();
                          zipFileSize += ze.getSize(); 
                        }
                        zf.close();
                      } catch (IOException ex) {
                        System.err.println(ex);
                      }
                    fis = new FileInputStream(basePath + "/decoded.zip");
                    ZipInputStream zis = new ZipInputStream(fis);
                    ZipEntry ze = zis.getNextEntry();
                    long i = 1;
                    while(ze != null){
                        String fileName = ze.getName();
                        File newFile = new File(basePath + "/scylla" + File.separator + fileName);
                        new File(newFile.getParent()).mkdirs();
                        FileOutputStream fos = new FileOutputStream(newFile);
                        int len, prev = 39;
                        while ((len = zis.read(buffer)) > 0) {
                            i+=len;
                            fos.write(buffer, 0, len);
                            final int ii = (int) i, zz = (int) zipFileSize, pp = prev;
                            if(prev != (int)(((float)i/(float)zipFileSize)*60.0)+39){
                                        jProgressBar2.setValue((int)(((float)ii/(float)zz)*2.0)+97);
                            }
                        }
                        fos.close();
                        zis.closeEntry();
                        ze = zis.getNextEntry();
                        
                    }
                    System.out.println(zipFileSize + " - " + i);
                    zis.closeEntry();
                    zis.close();
                    fis.close();
                    Desktop.getDesktop().open(new File(basePath + "/scylla"));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                File file = new File(basePath + "/decoded.zip");

                if(file.delete())
                {
                    jProgressBar2.setValue(100);
                    jLabel10.setText("Completed");
                }
                return "done";
            }
        };
        sw1.execute();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        payload = new ArrayList<String>();
        encodePayloadText.setText("");
        payloadSize = 0;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        decodeImageText.setText("");
        decodeSize = 0;
        dec = new ArrayList<String>();
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainAct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainAct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainAct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainAct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new mainAct();
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                int height = screenSize.height;
                int width = screenSize.width;
                frame.setSize(width/2, height/2);

                // center the jframe on screen
                frame.setLocationRelativeTo(null);
                
                frame.setVisible(true);
            }
        });
    }
    
    public static BufferedImage[] encode(BufferedImage[] carrier, BitInputStream payload, int noOfFiles, JLabel Error) throws Exception {
    	int minHeight = carrier[0].getHeight();
    	int minWidth = carrier[0].getWidth();
    	for(int i = 1; i<noOfFiles;++i){
    		minHeight = minHeight>carrier[i].getHeight()?carrier[i].getHeight():minHeight;
    		minWidth = minWidth>carrier[i].getWidth()?carrier[i].getWidth():minWidth;
    	}
    	
        for (int y = 1; y < minHeight; y++) {
            for (int x = 0; x < minWidth; x++) {
	            for(int i = 0; i<noOfFiles;++i){
	                int pixel = carrier[i].getRGB(x, y) & 0xFFFCFCFC;
	                for (int offset = 16; offset >= 0; offset -= 8) {
	                    int bits = payload.readBits(2);
	                    if (bits == -1){
	                    	for(int a = 0;a<noOfFiles;a++){
	                    		int[] bin = readHeader(y, x, a);
	                    		int b = 0;
	                    		for (int c = 0; b<36; c++){
	                    			int p = carrier[a].getRGB(c, 0) & 0xFFFCFCFC;
	                    			for (int o = 16; o >= 0; o -= 8) {
		                    			int d;
		                    			if(bin[b]==0 && bin[b + 1]==0) d = 0;
		                    			else if(bin[b]==0 && bin[b + 1]==1) d = 1;
		                    			else if(bin[b]==1 && bin[b + 1]==0) d = 2;
		                    			else d = 3;
		                    			p |= d << o;
		                    			b+=2;
	                    			}
	                    			carrier[a].setRGB(c, 0, p);
	                    		}
	                    	}
	                        return carrier;
	                    }
	                    pixel |= bits << offset;
	                }
	                carrier[i].setRGB(x, y, pixel);
            	}
            }
        }
        Error.setText("Not Enough Space. Add more images!!");
        throw new Exception("not enough space");
    }
    public static int[] readHeader(int y,int x,int no){
        int  bin[]=new int[36];
        int ret[] = new int[36];
        int i = 0, k = 0;
        while(y > 0)
        {
        bin[i++] = y%2;
           y = y/2;
        }
        for(int j = 13;j >= 0;j--, ++k)
        {
        	if(i<j) ret[k] = 0;
        	else ret[k] = bin[j];
        }
        i=14;
        while(x > 0)
        {
        bin[i++] = x%2;
           x = x/2;
        }
        for(int j = 27;j >= 14;j--, ++k)
        {
        	if(i<j) ret[k] = 0;
        	else ret[k] = bin[j];
        }
        i=28;
        while(no > 0)
        {
        bin[i++] = no%2;
           no = no/2;
        }        
        for(int j = 35;j >= 28;j--, ++k)
        {
        	if(i<j) ret[k] = 0;
        	else ret[k] = bin[j];
        }
        return ret;
    }
    public static int binToDec(int[] bin, int l, int h){
    	int deci = 0;
    	for(int i = h; i>=l;--i){
    		deci += bin[i] * Math.pow(2, h-i);
    	}
    	return deci;
    }
    public static void decode(BufferedImage[] carrier, BitOutputStream payload, int noOfFiles, JProgressBar jb) throws IOException {
    	int minHeight = carrier[0].getHeight();
    	int minWidth = carrier[0].getWidth();
    	for(int i = 1; i<noOfFiles;++i){
    		minHeight = minHeight>carrier[i].getHeight()?carrier[i].getHeight():minHeight;
    		minWidth = minWidth>carrier[i].getWidth()?carrier[i].getWidth():minWidth;
    	}
    	int[] bin = new int[36];
    	int p=0;
        for (int x = 0; p<36; x++) {
            for (int offset = 16; offset >= 0; offset -= 8) {
                int deci = (carrier[0].getRGB(x, 0) >> offset) & 0x3;
                if(deci == 0) {
                	bin[p++] = 0;
                	bin[p++] = 0;
                }
                else if(deci == 1) {
                	bin[p++] = 0;
                	bin[p++] = 1;
                }
                else if(deci == 2) {
                	bin[p++] = 1;
                	bin[p++] = 0;
                }
                else{
                	bin[p++] = 1;
                	bin[p++] = 1;
                }
            }
        }
                int[] index = new int[noOfFiles];
    	for(int i = 0;i<noOfFiles;++i){
    		int[] binSort = new int[36];
        	int pSort=0;
    		for (int x = 0; pSort<36; x++) {
	            for (int offset = 16; offset >= 0; offset -= 8) {
	                int deci = (carrier[i].getRGB(x, 0) >> offset) & 0x3;
	                if(deci == 0) {
	                	binSort[pSort++] = 0;
	                	binSort[pSort++] = 0;
	                }
	                else if(deci == 1) {
	                	binSort[pSort++] = 0;
	                	binSort[pSort++] = 1;
	                }
	                else if(deci == 2) {
	                	binSort[pSort++] = 1;
	                	binSort[pSort++] = 0;
	                }
	                else{
	                	binSort[pSort++] = 1;
	                	binSort[pSort++] = 1;
	                }
	            }
	        }
    		index[i] = binToDec(binSort, 28, 35);
    	}
        
        for(int j = 0; j < noOfFiles;++j){
        	for(int i = 0; i<noOfFiles-j-1;++i){
        		if(index[i] > index[i+1]){
        			int tempI = index[i];
        			index[i] = index[i+1];
        			index[i+1] = tempI;
        			BufferedImage tempC = carrier[i];
        			carrier[i] = carrier[i+1];
        			carrier[i+1] = tempC;
        		}
        	}
        }

        minHeight = binToDec(bin, 0, 13) + 2;
        for (int y = 1; y < minHeight; y++) {
            for (int x = 0; x < minWidth; x++) {
            	for(int i = 0; i<noOfFiles; ++i){
	                for (int offset = 16; offset >= 0; offset -= 8) {
	                    payload.write(2, (carrier[i].getRGB(x, y) >> offset) & 0x3);
	                }
            	}
            }
            jb.setValue((int)(((float)(y)/(float)minHeight)*72.0)+14);
        }
        payload.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEncodeImage;
    private javax.swing.JFrame confirmEncode;
    private javax.swing.JTextArea decodeImageText;
    private javax.swing.JButton encodeButton;
    private javax.swing.JTextArea encodeImageText;
    private javax.swing.JTextArea encodePayloadText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private final javax.swing.JProgressBar jProgressBar2 = new javax.swing.JProgressBar();
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

class BitInputStream extends InputStream
{
    private InputStream     myInput;
    private int             myBitCount;
    private int             myBuffer;
    private File            myFile;

    private static final int bmask[] = {
            0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,
            0x1ff,0x3ff,0x7ff,0xfff,0x1fff,0x3fff,0x7fff,0xffff,
            0x1ffff,0x3ffff,0x7ffff,0xfffff,0x1fffff,0x3fffff,
            0x7fffff,0xffffff,0x1ffffff,0x3ffffff,0x7ffffff,
            0xfffffff,0x1fffffff,0x3fffffff,0x7fffffff,0xffffffff
    };

    private static final int BITS_PER_BYTE = 8;
    /**
     * Construct a bit-at-a-time input stream from a file whose
     * name is supplied.
     * @param filename is the name of the file that will be read.
     * @throws RuntimeException if filename cannot be opened.
     */
    public BitInputStream(String filename)
    {
        this(new File(filename));
    }

    /**
     * Construct a bit-at-a-time input stream from <code>file</code>.
     * @param file is the File that is the source of the input
     * @throws RuntimeExceptoin if file cannot be opened.
     */
    public BitInputStream(File file)
    {
        myFile = file;
        try {
            reset();
        } catch (IOException e) {
            throw new RuntimeException("could not open file for reading bits "+e);
        }

    }

    /**
     * Open a bit-at-a-time stream that reads from supplied InputStream. If this
     * constructor is used the BitInputStream is not reset-able.
     * @param in is the stream from which bits are read.
     */
    public BitInputStream(InputStream in){
        myInput = in;
        myFile = null;
    }

    /**
     * Return true if the stream has been initialized from a File and
     * is thus reset-able. If constructed from an InputStream it is not reset-able.
     * @return true if stream can be reset (it has been constructed appropriately from a File).
     */
    public boolean markSupported(){
        return myFile != null;
    }

    /**
     * Reset stream to beginning. The implementation creates a new
     * stream.
     * @throws IOException if not reset-able (e.g., constructed from InputStream).
     */

    public void reset() throws IOException
    {
        if (! markSupported()){
            throw new IOException("not resettable");
        }
        try{
            close();
            myInput = new BufferedInputStream(new FileInputStream(myFile));
        }
        catch (FileNotFoundException fnf){
            System.err.println("error opening " + myFile.getName() + " " + fnf);
        }
        myBuffer = myBitCount = 0;
    }

    /**
     * Closes the input stream.
     * @throws RuntimeException if the close fails
     */

    public void close()
    {
        try{
            if (myInput != null) {
                myInput.close();
            }
        }
        catch (java.io.IOException ioe){
            throw new RuntimeException("error closing bit stream " + ioe);
        }
    }

    /**
     * Returns the number of bits requested as rightmost bits in
     * returned value, returns -1 if not enough bits available to
     * satisfy the request.
     *
     * @param howManyBits is the number of bits to read and return
     * @return the value read, only rightmost <code>howManyBits</code>
     * are valid, returns -1 if not enough bits left
     */

    public int readBits(int howManyBits) throws IOException
    {
        int retval = 0;
        if (myInput == null){
            return -1;
        }

        while (howManyBits > myBitCount){
            retval |= ( myBuffer << (howManyBits - myBitCount) );
            howManyBits -= myBitCount;
            try{
                if ( (myBuffer = myInput.read()) == -1) {
                    return -1;
                }
            }
            catch (IOException ioe) {
                throw new IOException("bitreading trouble "+ioe);
            }
            myBitCount = BITS_PER_BYTE;
        }

        if (howManyBits > 0){
            retval |= myBuffer >> (myBitCount - howManyBits);
            myBuffer &= bmask[myBitCount - howManyBits];
            myBitCount -= howManyBits;
        }
        return retval;
    }

    /**
     * Required by classes extending InputStream, returns
     * the next byte from this stream as an int value.
     * @return the next byte from this stream
     */
    public int read() throws IOException {
        return readBits(8);
    }
}

class BitOutputStream extends OutputStream
{


    private OutputStream  myOutput;
    private int           myBuffer;
    private int           myBitsToGo;

    private static final int bmask[] = {
            0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,
            0x1ff,0x3ff,0x7ff,0xfff,0x1fff,0x3fff,0x7fff,0xffff,
            0x1ffff,0x3ffff,0x7ffff,0xfffff,0x1fffff,0x3fffff,
            0x7fffff,0xffffff,0x1ffffff,0x3ffffff,0x7ffffff,
            0xfffffff,0x1fffffff,0x3fffffff,0x7fffffff,0xffffffff
    };

    private static final int BITS_PER_BYTE = 8;

    /**
     * Required by OutputStream subclasses, write the low
     * 8-bits to the underlying outputstream
     */
    public void write(int b) throws IOException {
        myOutput.write(b);
    }


    public BitOutputStream(OutputStream out){
        myOutput = out;
        initialize();
    }

    private void initialize(){
        myBuffer = 0;
        myBitsToGo = BITS_PER_BYTE;
    }
    /**
     * Construct a bit-at-a-time output stream with specified file
     * name
     * @param filename is the name of the file being written
     */
    public BitOutputStream(String filename)
    {
        try{
            myOutput = new BufferedOutputStream(new FileOutputStream(filename));
        }
        catch (FileNotFoundException fnf){
            System.err.println("could not create " + filename + " " + fnf);
        }
        catch(SecurityException se){
            System.err.println("security exception on write " + se);
        }
        initialize();
    }


    /**
     * Flushes bits not yet written, must be called by client
     * programs if <code>close</code> isn't called.
     *
     */
    public void flush()
    {
        if (myBitsToGo != BITS_PER_BYTE) {
            try{
                write( (myBuffer << myBitsToGo) );
            }
            catch (java.io.IOException ioe){
                System.err.println("error writing bits on flush " + ioe);
            }
            myBuffer = 0;
            myBitsToGo = BITS_PER_BYTE;
        }

        try{
            myOutput.flush();
        }
        catch (java.io.IOException ioe){
            System.err.println("error on flush " + ioe);
        }
    }

    /**
     * releases system resources associated with file and
     * flushes bits not yet written. Either this function
     * or flush must be called or not all bits will be written
     *
     */
    public void close()
    {
        flush();
        try{
            myOutput.close();
        }
        catch (IOException ioe){
            System.err.println("error closing BitOutputStream " + ioe);
        }
    }

    /**
     * write bits to file
     * @param howManyBits is number of bits to write (1-32)
     * @param value is source of bits, rightmost bits are written
     */

    public void write(int howManyBits, int value)
    {
        value &= bmask[howManyBits];  // only right most bits valid

        while (howManyBits >= myBitsToGo){
            myBuffer = (myBuffer << myBitsToGo) |
                    (value >> (howManyBits - myBitsToGo));
            try{
                write(myBuffer);
            }
            catch (java.io.IOException ioe){
                System.err.println("error writing bits " + ioe);
            }

            value &= bmask[howManyBits - myBitsToGo];
            howManyBits -= myBitsToGo;
            myBitsToGo = BITS_PER_BYTE;
            myBuffer = 0;
        }

        if (howManyBits > 0) {
            myBuffer = (myBuffer << howManyBits) | value;
            myBitsToGo -= howManyBits;
        }
    }
}

